/*
 * This software is contributed or developed by KYOCERA Corporation.
 * (C) 2012 KYOCERA Corporation
 * (C) 2013 KYOCERA Corporation
 * (C) 2016 KYOCERA Corporation
 *
 * drivers/input/touchscreen/board-8974-touch.h
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 and
 * only version 2 as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 *
*/
#ifndef BOARD_8974_TOUCH_H
#define BOARD_8974_TOUCH_H

#ifdef CONFIG_TOUCHSCREEN_ATMEL_MXT_KC
#include <linux/kernel.h>
#include <linux/gpio.h>
//#include <linux/i2c/atmel_mxt_kc.h>
#include "kc_ts.h"


#define MXT_TS_RESET_GPIO		60
#define MXT_TS_GPIO_IRQ		61

#define MXT_PANEL_WIDTH		1920
#define MXT_PANEL_HEIGHT	1080

#define MXT_BOARD_INFO		I2C_BOARD_INFO("mXT224S", 0x94 >> 1)

static inline int mxt_init_hw(void)
{
	int rc;

	rc = gpio_request(MXT_TS_GPIO_IRQ, "mxt_ts_irq_gpio");
	if (rc) {
		pr_err("%s: unable to request mxt_ts_irq gpio [%d]\n"
						, __func__, MXT_TS_GPIO_IRQ);
		goto err_irq_gpio_req;
	}

	rc = gpio_direction_input(MXT_TS_GPIO_IRQ);
	if (rc) {
		pr_err("%s: unable to set_direction for mxt_ts_irq gpio [%d]\n"
						, __func__, MXT_TS_GPIO_IRQ);
		goto err_irq_gpio_set;
	}

	rc = gpio_request(MXT_TS_RESET_GPIO, "mxt_reset_gpio");
	if (rc) {
		pr_err("%s: unable to request mxt_reset gpio [%d]\n"
						, __func__, MXT_TS_RESET_GPIO);
		goto err_reset_gpio_req;
	}

	rc = gpio_direction_output(MXT_TS_RESET_GPIO, 0);
	if (rc) {
		pr_err("%s: unable to set_direction for mxt_reset gpio [%d]\n"
						, __func__, MXT_TS_RESET_GPIO);
		goto err_reset_gpio_set;
	}

	return 0;

err_reset_gpio_set:
	gpio_free(MXT_TS_RESET_GPIO);
err_reset_gpio_req:
err_irq_gpio_set:
	gpio_free(MXT_TS_GPIO_IRQ);
err_irq_gpio_req:
	return rc;
}

static inline int mxt_reset_hw(void)
{
	KC_TS_DEV_DBG("%s: start\n",__func__);
	gpio_set_value(MXT_TS_RESET_GPIO, 0);
	usleep_range(1000, 1000);
	gpio_set_value(MXT_TS_RESET_GPIO, 1);
	KC_TS_DEV_DBG("%s: end\n",__func__);

	return 0;
}

static inline int mxt_shutdown_hw(void)
{
	gpio_set_value(MXT_TS_RESET_GPIO, 0);
	usleep_range(1000, 1000);

	return 0;
}

static const u8 mxt_config_data[] = {
	/* T71 Object */
	0x47, 0x70,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00,
	/* T7 Object */
	0x07, 0x04,
	0xFF, 0xFF, 0x0A, 0x03,
	/* T8 Object */
	0x08, 0x0E,
	0x1C, 0x00, 0xFF, 0x00, 0x00, 0x00, 0xFF, 0x01, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	/* T9 Object */
	0x09, 0x2E,
	0x8B, 0x01, 0x01, 0x16, 0x0D, 0x00, 0x60, 0x28, 0x01, 0x07,
	0x0A, 0x01, 0x02, 0x00, 0x08, 0x0F, 0x28, 0x00, 0x7F, 0x07,
	0x37, 0x04, 0x06, 0x06, 0x1B, 0x1B, 0xF0, 0x1F, 0xFF, 0x2F,
	0x0F, 0x0A, 0x00, 0x00, 0x01, 0x60, 0x04, 0xE0, 0x00, 0x96,
	0x96, 0x00, 0x00, 0x00, 0x00, 0xC8,
	/* T18 Object */
	0x12, 0x02,
	0x00, 0x00,
	/* T25 Object */
	0x19, 0x09,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* T42 Object */
	0x2A, 0x0A,
	0x01, 0x1E, 0x2E, 0x2E, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* T46 Object */
	0x2E, 0x0A,
	0x04, 0x00, 0x08, 0x0C, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01,
	/* T47 Object */
	0x2F, 0x1A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* T56 Object */
	0x38, 0x1E,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* T57 Object */
	0x39, 0x03,
	0x00, 0x00, 0x00,
	/* T61 Object */
	0x3D, 0x0A,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* T65 Object */
	0x41, 0x0B,
	0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00,
	/* T66 Object */
	0x42, 0x03,
	0x00, 0xFE, 0x32,
	/* T70 Object */
	0x46, 0x50,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	/* T72 Object */
	0x48, 0x50,
	0x0B, 0x00, 0x00, 0x00, 0x00, 0x05, 0x0A, 0x05, 0x05, 0x50,
	0x14, 0x14, 0x0A, 0x05, 0x20, 0x00, 0x00, 0x70, 0x00, 0x00,
	0x02, 0x00, 0x05, 0x0A, 0x0F, 0x14, 0x0C, 0x0C, 0x0C, 0x0C,
	0x0C, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00,
	0x03, 0x00, 0x05, 0x0A, 0x0F, 0x14, 0x20, 0x20, 0x20, 0x20,
	0x20, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x0A,
	0x03, 0x00, 0x05, 0x0A, 0x0F, 0x14, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x00, 0x0A,
	/* T80 Object */
	0x50, 0x04,
	0x01, 0x19, 0x87, 0x0A,
};



#endif /* CONFIG_TOUCHSCREEN_ATMEL_MXT_KC */
#endif /* BOARD_8974_TOUCH_H */
